<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>GCC | 대체로 무해함</title>
    <link>/tags/gcc/</link>
      <atom:link href="/tags/gcc/index.xml" rel="self" type="application/rss+xml" />
    <description>GCC</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>ko-kr</language><copyright>© lethean</copyright><lastBuildDate>Thu, 04 Feb 2010 00:00:00 +0000</lastBuildDate>
    <image>
      <url>img/map[gravatar:%!s(bool=false) shape:circle]</url>
      <title>GCC</title>
      <link>/tags/gcc/</link>
    </image>
    
    <item>
      <title>우분투에서 ccache 사용하기</title>
      <link>/2010/02/04/2010-02-04-using-ccache-in-ubuntu/</link>
      <pubDate>Thu, 04 Feb 2010 00:00:00 +0000</pubDate>
      <guid>/2010/02/04/2010-02-04-using-ccache-in-ubuntu/</guid>
      <description>&lt;p&gt;
&lt;a href=&#34;http://www.google.co.kr/search?hl=ko&amp;amp;newwindow=1&amp;amp;q=ccache&amp;amp;btnG=%EA%B2%80%EC%83%89&amp;amp;lr=lang_ko&amp;amp;aq=f&amp;amp;oq=&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ccache&lt;/a&gt;
는 워낙 유명하고 오래된 개발 도구라서, 검색해보면 우리말로 된 글도 많이 찾을 수 있으므로 자세한 설명은 생략하고, 최근에 다른 개발 장비를 구축할 일이 있어서 검토해보다가, 페도라는 이미 기본으로 ccache를 사용하도록 되어 있고, 우분투 / 데비안 계열에서도 매우 쉽게 사용할 수 있도록 되어 있는 걸 알게 되었습니다. 그래서 다시 한 번 정리합니다.&lt;/p&gt;
&lt;p&gt;먼저 패키지를 설치합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ sudo apt-get install ccache
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;/etc/environment&lt;/code&gt; 파일을 열어 &lt;code&gt;PATH&lt;/code&gt; 변수 맨 앞에 &lt;code&gt;&#39;/usr/lib/ccache&#39;&lt;/code&gt; 를 추가합니다. 예를 들어 아래와 같다면&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PATH=&amp;quot;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같이 변경합니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;PATH=&amp;quot;/usr/lib/ccache:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다시 로그인하면 모든 gcc, g++ 명령은 자동으로 ccache를 이용하게 됩니다.&lt;/p&gt;
&lt;p&gt;물론 본인 계정에서만 사용하고 싶다면, 홈디렉토리 밑의 &lt;code&gt;.bashrc&lt;/code&gt; 또는 &lt;code&gt;.bash_profile&lt;/code&gt;, &lt;code&gt;.profile&lt;/code&gt; 파일에 다음과 같은 내용을 추가하면 됩니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;export PATH=&amp;quot;/usr/lib/ccache:$PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;GCC가 느리다고 불평하는 일이 조금 줄어들까요?&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GCC 미리 정의된 매크로 얻기</title>
      <link>/2010/01/09/2010-01-09-getting-predefined-macros-in-gcc/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      <guid>/2010/01/09/2010-01-09-getting-predefined-macros-in-gcc/</guid>
      <description>&lt;p&gt;멀티플랫폼에서 동작하는 C/C++ 코드를 gcc를 이용해 컴파일할때 플랫폼이나 운영체제를 확인하는 방법 중 하나는 gcc 툴체인이 만들어질때 정의되는 매크로를 사용하는 것입니다. 그런데 이번에 MacOS X / iPhone 플랫폼에 기존 코드를 포팅하면서 이 방법을 이용하려 하는데, 너무 오래 전에 했던 작업이라 (역시나) 명령어를 기억할 수 없었습니다. 그래서 겨우 구글링해서 다시 알게된 내용을 기록해 둡니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$ gcc -E -dM -x c /dev/null
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;그리고 이 방법을 이용해 사용한 최종 코드는 다음과 같습니다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#if defined(_WIN32)
#include &amp;quot;lib-win32/config.h&amp;quot;
#elif defined(_WIN64)
#include &amp;quot;lib-win64/config.h&amp;quot;
#elif defined(__ENVIRONMENT_IPHONE_OS_VERSION_MIN_REQUIRED__)
#include &amp;quot;lib-iphone/config.h&amp;quot;
#elif defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) /* or __APPLE__ */
#include &amp;quot;lib-macosx/config.h&amp;quot;
#else /* linux */
#include &amp;quot;config.h&amp;quot;
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;사실은, 더 깔끔한 다른 방법이 있을지 궁금하기도 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TCMalloc, 구글 성능 도구</title>
      <link>/2009/04/29/2009-04-29-tcmalloc-google-perftools/</link>
      <pubDate>Wed, 29 Apr 2009 00:00:00 +0000</pubDate>
      <guid>/2009/04/29/2009-04-29-tcmalloc-google-perftools/</guid>
      <description>&lt;p&gt;장기간 실행되면서 빈번하게 메모리를 할당 / 해제하는 것은 물론 수십 개의 쓰레드가 동작하는 프로그램에서는 어쩔 수 없이 메모리 단편화(Memory Fragmentation)가 발생합니다. 메모리 단편화가 많을 경우 어플리케이션 로직에 메모리 누수(memork leak)가 없어도 C 라이브러리 메모리 관리자가 메모리를 커널에 반환하지 않기 때문에 프로세스의 메모리 사용량은 계속 늘어납니다.(참고로 이러한 경우인지 여부는 주기적으로 &lt;code&gt;mallinfo()&lt;/code&gt; 정보를 확인하면 됩니다) 물론 이를 회피하기 위한 기법이나 아키텍쳐는 많이 있지만, 그리 쉽게 원하는 성능과 효율을 얻기는 힘들더군요.&lt;/p&gt;
&lt;p&gt;그런데, 며칠 동안 이와 비슷한 문제를 디버깅하다가 예전에 무심코 지나쳤던 
&lt;a href=&#34;http://code.google.com/p/google-perftools/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Performance Tools&lt;/a&gt;
 라이브러리를 다시 발견하고, 그 안에 들어 있는 
&lt;a href=&#34;http://google-perftools.googlecode.com/svn/trunk/doc/tcmalloc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCMalloc(Thread-Caching Malloc)&lt;/a&gt;
 모듈을 사용해 보았는데 사용하지 않을 때와 비교해 놀랄만큼 많은 차이를 보이는군요. 문서에 보면 성능과 효율을 동시에 향상시킨다고 하는데 성능은 사실 잘 모르겠지만,  장기간 실행시 메모리 사용량 변동률은 너무나 맘에 듭니다.&lt;/p&gt;
&lt;p&gt;간단하게 TCMalloc의 동작 방식을 설명하면, 일단 중앙 메모리 관리자와 쓰레드별 메모리 관리자를 구분합니다. 작은 크기(32K 이하)의 메모리 할당 / 해제 요청은  쓰레드별 메모리 관리자가 처리하고, 부족할 경우 중앙 메모리 관리자에서 얻어오는 방식입니다. 따라서 메모리 할당시 불필요한 동기화 과정이 이론상 거의 없어 성능 향상을 얻을 수 있습니다.  메모리 크기를 60개의 클래스로 나누어 관리하게 때문에 단편화도 줄어듧니다. 큰 메모리(32K 이상)는 전역 관리자에서 페이지 크기(4K) 단위로 클래스를 나누어 mmap()을 이용하여 할당하는 것을 제외하고 전체적으로 비슷하게 처리합니다.&lt;/p&gt;
&lt;p&gt;소스를 빌드하고 프로젝트에 라이브러리를 링크하는 방법은 
&lt;a href=&#34;http://code.google.com/p/google-perftools/wiki/GooglePerformanceTools&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;위키페이지&lt;/a&gt;
에 설명되어 있으며, 문제가 발생하거나 더 복잡한 튜닝을 원한다면 소스 묶음 안에 있는 
&lt;a href=&#34;http://google-perftools.googlecode.com/svn/trunk/README&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;README&lt;/a&gt;
, 
&lt;a href=&#34;http://google-perftools.googlecode.com/svn/trunk/INSTALL&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;INSTALL&lt;/a&gt;
 파일 등을 참고하면 됩니다. (특히 리눅스 x86_64 환경에서는 &lt;code&gt;configure&lt;/code&gt; 실행시 &amp;lsquo;&lt;code&gt;--enable-frame-pointers&lt;/code&gt;&amp;rsquo; 옵션을 추가하는 것이 좋습니다)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GCC와 GLIBC로 최적화하기</title>
      <link>/2006/03/13/2006-03-13-optimizing-applications-with-gcc-and-glibc/</link>
      <pubDate>Mon, 13 Mar 2006 00:00:00 +0000</pubDate>
      <guid>/2006/03/13/2006-03-13-optimizing-applications-with-gcc-and-glibc/</guid>
      <description>&lt;p&gt;gcc와 glibc로 어플리케이션 최적화하기 (
&lt;a href=&#34;http://people.redhat.com/drepper/optimtut1.ps.gz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Optimizing Applications with gcc &amp;amp; glibc&lt;/a&gt;
)&lt;/p&gt;
&lt;p&gt;glibc 개발자인 
&lt;a href=&#34;http://people.redhat.com/drepper/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ulrich Drepper&lt;/a&gt;
가 1999년에 작성한 40페이지 분량의 글이다. 대략 관심있는 내용을 정리해본다.&lt;/p&gt;
&lt;span style=&#34;font-weight:bold;&#34;&gt;
 사용 안되는 코드 컴파일시 제거 &lt;/span&gt;
&lt;p&gt;다음 코드는 주어진 타입에 따라 다른 작업을 하는데, &lt;code&gt;int&lt;/code&gt;형과 &lt;code&gt;long int&lt;/code&gt;형이 같은 플랫폼일 경우 좋지 않은 성능을 보인다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;long intadd (long int a, void *ptr, int type)
{
  if (type == 0)
    return a + *(int *)ptr;
  else
    return a + *(long int *)ptr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;위 코드는 다음과 같이 최적화할 수 있다. 이는 컴파일러가 알아서 최적화해준다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;long intadd (long int a, void *ptr, int type)
{
  if (sizeof(int) == sizeof(long int) || type == 0)
    return a + *(int *)ptr;
  else
    return a + *(long int *)ptr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;다음과 같은 방법을 이용하면 전처리기(preprocessor)가 알아서 최적화해준다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;long intadd (long int a, void *ptr, int type)
{
#if LONG_MAX != INT_MAX
  if (type == 0)
    return a + *(int *)ptr;
  else
#endif
  return a + *(long int *)ptr;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;span style=&#34;font-weight:bold;&#34;&gt;
 컴파일러 내부 함수(intrinsics) 이용하기&lt;/span&gt;
&lt;p&gt;gcc 2.96 이후부터 많은 &lt;code&gt;__builtin_*&lt;/code&gt; 함수가 존재한다. 이 함수들은 컴파일시에 컴파일러가 판단하여 인수가 상수이거나 정해진 크기 등일 경우 최적화된 코드를 생성해 준다. 이 함수들은 매크로인 경우도 있고 컴파일시 정적으로 링크되는 라이브러리일 수도 있다. 어떤 함수들은 컴파일러 내부 함수를 이용해 최적화되어 있다. 따라서 가능한 이러한 함수들은 별도 랩핑을 두지 않고 헤더파일을 포함하여 그대로 사용하면 더 좋은 성능의 코드를 얻을 수 있다. 내부 함수를 이용하는 함수 중에 대표적인 것들은 다음과 같은 것들이 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;alloca()
memcpy(), memcmp(), memset()
strcmp(), strcpy(), strlen()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;더 많은 함수는 원문을 참고하면 된다.&lt;/p&gt;
&lt;span style=&#34;font-weight:bold;&#34;&gt;
 strcpy()와 memcpy()&lt;/span&gt;
&lt;p&gt;문자열의 크기를 이미 알고 있다면 &lt;code&gt;str*()&lt;/code&gt; 류의 함수보다 &lt;code&gt;mem*()&lt;/code&gt; 류의 함수를 이용하는 것이 좋다. 우선 매 바이트마다 문자열 끝 코드인 0x00을 검사하는 코드가 없어 빠르고, 무엇보다도 &lt;code&gt;memcpy()&lt;/code&gt;는 플랫폼 기본 단위(예를 들어 32비트 플랫폼에서는 4바이트) 연산을 하기 때문에, 항상 바이트 단위로 작업하는 &lt;code&gt;strcpy()&lt;/code&gt; 또는 &lt;code&gt;strncpy()&lt;/code&gt;보다 빠를 수 밖에 없다.&lt;/p&gt;
&lt;span style=&#34;font-weight:bold;&#34;&gt;
 strcat(), strncat()&lt;/span&gt;
&lt;p&gt;절대로 &lt;code&gt;strcat()&lt;/code&gt;, &lt;code&gt;strncat()&lt;/code&gt; 함수는 사용하지 말아야 한다. 문자열을 합치는데 이 함수를 이용하는 것은 성능에 치명적이다. 내부적으로 &lt;code&gt;strlen()&lt;/code&gt;을 호출하는 것 뿐 아니라 문자열을 처리하기 위한 여러 조건을 검사하기 때문에 매우 느리다. 이보다는 직접 &lt;code&gt;strlen()&lt;/code&gt;으로 문자열 길이를 구한 뒤 &lt;code&gt;memcpy()&lt;/code&gt;를 이용해 해당 위치에 복사하거나 필요한 작업을 하는 것이 더 현명한 방법이다.&lt;/p&gt;
&lt;p&gt;다음은 이에 대한 샘플 코드이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  char *buf = ...;
  size_t bufmax = ...;

  /* Add &#39;s&#39; to the string in buffer &#39;buf&#39;. */
  if (strlen(buf) + strlen(s) + 1 &amp;gt; bufmax)
    buf = (char *)realloc(buf, (bufmax *= 2));
  strcat(buf, s);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;프로그래머 관점에서 이 코드는 괜찮아 보이지만, 성능은 최악이다. 다음과 같이 고치면 더 좋은 성능을 낼 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
  char *buf = ...;
  size_t bufmax = ...;
  size_t slen, buflen;

  /* Add &#39;s&#39; to the string in buffer &#39;buf&#39;. */
  slen = strlen(s) + 1;
  buflen = strlen(buf);

  if (buflen + slen &amp;gt; bufmax)
    buf = (char *)realloc(buf, (bufmax *= 2));

  memcpy(buf + buflen, s, slen);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;span style=&#34;font-weight:bold;&#34;&gt;
 메모리 할당 최적화&lt;/span&gt;
&lt;p&gt;&lt;code&gt;malloc()&lt;/code&gt;과 &lt;code&gt;calloc()&lt;/code&gt;의 차이점을 모르는 프로그래머는 없겠지만, 그래서 &lt;code&gt;calloc()&lt;/code&gt;보다 직접 &lt;code&gt;malloc()&lt;/code&gt; 호출 이후 &lt;code&gt;memset()&lt;/code&gt; 등을 이용해 0으로 초기화하는 방법을 많이 이용하기도 한다. 하지만 &lt;code&gt;calloc()&lt;/code&gt;은 커널 페이지에서 이미 0으로 초기화되어 있는 영역이 있을 경우 불필요한 초기화 과정을 건너뛰기 때문에 더 좋은 성능을 낼 수 있다.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;alloca()&lt;/code&gt; 함수를 모르는 사람도 많은데, 이 함수는 지정한 크기의 영역을 현재 스택 영역에 할당한다. 메모리 관리자를 거치지 않고 단순히 스택 포인터 레지스터 조작만으로 할당 작업이 이루어지기 때문에 매우 성능이 좋을 뿐 아니라, 따로 해제하지 않아도 함수가 끝나는 시점에서 자동으로 해제된다. 따라서 함수 내부에서 임시로 할당하여 사용하는 많은 구현에서 &lt;code&gt;malloc()&lt;/code&gt; 보다 &lt;code&gt;alloca()&lt;/code&gt; 를 사용한 코드의 성능은 매우 향상된다. glibc에서 확장으로 제공하는 &lt;code&gt;strdupa()&lt;/code&gt;, &lt;code&gt;strndupa()&lt;/code&gt; 등의 API는 모두 이 방법을 이용한 최적화된 성능을 보장한다.&lt;/p&gt;
&lt;p&gt;&lt;span style=&#34;font-weight:bold;&#34;&gt;그외&amp;hellip;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;기타 이 글에서는 gprof, sprof 등을 이용한 코드 프로파일링 방법과 GCC 컴파일러 확장을 이용한 다양한 최적화 방법을 제시하고 있다. 더불어 저자는 같은 내용에 조금 더 내용이 보강된 
&lt;a href=&#34;http://people.redhat.com/drepper/optimtut2.ps.gz&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Application Optimization on Linux&lt;/a&gt;
 글에서 프로필과 관련된 더 자세한 정보를 제공하고 있다.&lt;/p&gt;
&lt;p&gt;이 글에서도 언급한 내용이지만, 많은 프로그래머는 자신이 작성한 프로그램이 정말 잘 쓰여지고 성능이 좋다고 생각하지만, 불행하게도 아닌 경우가 대부분이다. 최적화된 프로그램을 작성하는 것은 항상 진행중인 배우는 과정(learning process)이다. 항상 새로운 테크닉을 배우고, 자신의 코드를 검토하고, 상호작용하는 라이브러리와 프로세서에 대해 생각해야 한다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GCC Symbol Visibility Patch</title>
      <link>/2006/01/31/2006-01-31-gcc-symbol-visibility-patch/</link>
      <pubDate>Tue, 31 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/2006/01/31/2006-01-31-gcc-symbol-visibility-patch/</guid>
      <description>&lt;p&gt;GCC 4.0부터 포함되어 있는 
&lt;a href=&#34;http://www.nedprod.com/programs/gccvisibility.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GCC Symbol Visibility Patch&lt;/a&gt;
는 GCC 컴파일러를 조금 더 유용하게 만들어 준다. 홈페이지에서 언급한 이 기능의 장점은 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;공유 라이브러리와 같은 DSO(Dynamic Shared Object, 동적 공유 객체)를 로드하는데 걸리는 시간을 획기적으로 향상시켜준다.&lt;/li&gt;
&lt;li&gt;컴파일러 최적화기(optimiser)가 더 좋은 코드를 만들수 있다.&lt;/li&gt;
&lt;li&gt;DSO 크기를 5~20% 정도 줄여준다.&lt;/li&gt;
&lt;li&gt;심볼(symbol)이 충돌할 기회를 낮춰준다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;사용법은 다음과 같다. 물론 GCC 4.x 버전이 필요하다.&lt;/p&gt;
&lt;p&gt;모듈에서 제공하는 인터페이스나 API를 정의하는 헤더파일에서 외부로 공개되는 모든 구조체, 클래스, 함수 선언 앞에 &lt;code&gt;__attribute__ ((visibility(&amp;quot;default&amp;quot;)))&lt;/code&gt; 키워드를 붙여준다. (매크로를 사용하면 편리하다) 이렇게 한다음 Makefile과 같은 빌드 환경에서 컴파일 옵션에 &lt;code&gt;-fvisibility=hidden&lt;/code&gt; 인수를 추가하면 된다. 이렇게 생성된 DSO 파일과 원래 방식으로 생성한 파일을 &lt;code&gt;nm -C -D &lt;/code&gt;명령으로 확인해 보면 차이를 금방 알 수 있다. 다음은 윈도우즈 환경과 호환되는 예제 매크로 파일이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#ifdef _MSC_VER
#ifdef BUILDING_DLL
#define DLLEXPORT __declspec(dllexport)
#else
#define DLLEXPORT __declspec(dllimport)
#endif
#define DLLLOCAL
#else
#ifdef HAVE_GCCVISIBILITYPATCH
#define DLLEXPORT __attribute__ ((visibility(&amp;quot;default&amp;quot;)))
#define DLLLOCAL __attribute__ ((visibility(&amp;quot;hidden&amp;quot;)))
#else
#define DLLEXPORT
#define DLLLOCAL
#endif
#endif

extern &amp;quot;C&amp;quot; DLLEXPORT void function(int a);

class DLLEXPORT SomeClass{
  int c;
  DLLLOCAL void privateMethod();  // Only for use within this
  DSOpublic:Person(int _c) : c(_c) { }
  static void foo(int a);
};
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;실제로 
&lt;a href=&#34;http://www.nedprod.com/TnFOX/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TnFOX&lt;/a&gt;
 프로젝트에서 사용하는 헤더파일을 참고해도 도움이 될 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Shared library support
#ifdef WIN32
#define FXIMPORT __declspec(dllimport)
#define FXEXPORT __declspec(dllexport)
#define FXDLLLOCAL
#define FXDLLPUBLIC
#else
#define FXIMPORT
#ifdef GCC_HASCLASSVISIBILITY
#define FXEXPORT __attribute__ ((visibility(&amp;quot;default&amp;quot;)))
#define FXDLLLOCAL __attribute__ ((visibility(&amp;quot;hidden&amp;quot;)))
#define FXDLLPUBLIC __attribute__ ((visibility(&amp;quot;default&amp;quot;)))
#else
#define FXEXPORT
#define FXDLLLOCAL
#define FXDLLPUBLIC
#endif
#endif

// Define FXAPI for DLL builds
#ifdef FOXDLL
#ifdef FOXDLL_EXPORTS
#define FXAPI FXEXPORT
#else
#define FXAPI  FXIMPORT
#endif // FOXDLL_EXPORTS
#else
#define FXAPI
#endif // FOXDLL

// Throwable classes must always be visible on GCC in all binaries
#ifdef WIN32
#define FXEXCEPTIONAPI(api) api
#elif defined(GCC_HASCLASSVISIBILITY)
#define FXEXCEPTIONAPI(api) FXEXPORT
#else
#define FXEXCEPTIONAPI(api)
#endif
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GCC 확장 기능 이용하기</title>
      <link>/2006/01/20/2006-01-20-using-gcc-extensions/</link>
      <pubDate>Fri, 20 Jan 2006 00:00:00 +0000</pubDate>
      <guid>/2006/01/20/2006-01-20-using-gcc-extensions/</guid>
      <description>&lt;p&gt;Robert Love의 블로그에 올라온 &amp;lsquo;
&lt;a href=&#34;http://rlove.org/log/2005102601&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;With a little help from your compiler&lt;/a&gt;
&amp;rsquo; 라는 글을 보면 GCC 3 이후에 추가된 여러가지 확장 기능에 대해 설명하고 있다. 이 기능들을 이용하면 GCC 컴파일러가 코드를 최적화하는데 더 많은 정보를 줄 수 있고, 프로그래머의 작은 실수를 컴파일 과정에서 미리 잡아낼 수도 있다. 이 중에서 관심이 가는 몇가지만 간추려보자.&lt;/p&gt;
&lt;p&gt;우선 GCC가 아닌 컴파일러와의 호환을 위해 다음과 같은 헤더 파일을 하나 만들어 사용한다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#if __GNUC__ &amp;gt;= 3
# define inline inline __attribute__ ((always_inline))
# define __pure __attribute__ ((pure))
# define __const __attribute__ ((const))
# define __noreturn __attribute__ ((noreturn))
# define __malloc __attribute__ ((malloc))
# define __must_check __attribute__ ((warn_unused_result))
# define __deprecated __attribute__ ((deprecated))
# define __used __attribute__ ((used))
# define __unused __attribute__ ((unused))
# define __packed __attribute__ ((packed))
# define likely(x) __builtin_expect (!!(x), 1)
# define unlikely(x) __builtin_expect (!!(x), 0)
#else
# define inline /* no inline */
# define __pure /* no pure */
# define __const /* no const */
# define __noreturn /* no noreturn */
# define __malloc /* no malloc */
# define __must_check /* no warn_unused_result */
# define __deprecated /* no deprecated */
# define __used /* no used */
# define __unused /* no unused */
# define __packed /* no packed */
# define likely(x) (x)
# define unlikely(x) (x)
#endif
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;참고로 VisualC++은 inline 키워드를 C++ 컴파일러는 정상적으로 인식하나 C 컴파일러는 인식하지 못한다. 따라서 __inline 로 해주면 문제없이 컴파일할 수 있다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__const int f (int x) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;__const 같은 경우 함수 내부에서 절대로 전역 변수에 접근할 수 없고, 포인터 인수를 받을 수도 없도록 한다. abs() 같은 수학 함수에 적합하다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__must_check int f (void) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;리눅스 커널 API 중에서 copy_{tofrom}_user() 에서 사용되어 친숙한 기능으로, 호출하는 코드에서 이 함수의 리턴값을 반드시 검사하도록 컴파일 과정에서 알려준다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;__deprecated void f (void) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;함수를 호출하게 되면 컴파일 과정에서 경고를 준다. 새로운 API로 대체되었거나, 앞으로 없어질 API를 명시하는데 유용하다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;static __used void f (void) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;어셈블리 코드에서만 호출하거나 다른 이유로 최적화 과정에서 없어지면 안되는 경우를 명시한다. 사용하지 않은 변수나 함수라는 컴파일러 경고도 없애준다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;void f (int x __unused) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;지정한 인수를 사용하지 않는 경우를 이미 프로그래머가 알고 있음을 컴파일러에게 알려주어 경고 메시지를 뿌리지 말도록 한다. 권하는 경우는 아니지만, 이벤트 방식 GUI 프로그래밍에서 많이 발견할 수 있는 패턴이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct __packed s { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;구조체 필드를 정렬(align)에 상관없이 압축한다. 구조체 크기는 줄어들 수 있지만, 지금까지 경험으로 볼때 별로 권장하고 싶지 않은 기능이다. ARM과 같은 아키텍쳐에서는 정렬되어 있지 않을 경우 바로 오동작을 일으킨다. 가장 좋은 방법은 구조체의 필드 순서 및 크기를 프로그래머가 정확하게 배치하는 것이다.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;if (unlikely (foo) &amp;amp;&amp;amp; likely (bar)) { ... }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;리눅스 커널 소스에서 많이 볼 수 있는 문법이다. 특정 조건이 일어날 확률이 훨씬 많을 경우 GCC에게 이를 알려주어 블럭 재배치 최적화에 이용하도록 할 수 있다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
